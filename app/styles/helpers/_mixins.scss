/*
  Функция для масштабирования
*/
@function pxtovw($value, $base) {
  $result: ($value / $base) * 100vw;

  @return $result;
}

/*
Миксин для подключения шрифтов.
Описание в файле _fonts.scss
*/
@mixin font-face($name, $style, $weight, $fontname) {
  $path: '../fonts/';

  @font-face {
    font-family: $name;
    font-style: $style;
    font-weight: $weight;
    font-display: swap;
    src: url($path + $fontname + '.eot');
    src: url('' + $path + $fontname + '.eot?#iefix') format('embedded-opentype'), url('' + $path + $fontname + '.woff2') format('woff2'), url('' + $path + $fontname + '.woff') format('woff'), url('' + $path + $fontname + '.ttf') format('truetype'), url('' + $path + $fontname + '.svg#' + $fontname) format('svg');
  }
}

/*
Миксин для элементов, которые должны сохранять определенное соотношение сторон (напр., блок с видео)
Пример использования:
div {
  @include ratio(16,9);
} */
@mixin ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y/$x) *100+'%');

  @if $pseudo {

    &::before {
      @include pseudo($pos: relative);

      width: 100%;
      padding-top: $padding;
    }
  }

  @else {
    padding-top: $padding;
  }
}

/*
Миксин для базовых параметров псевдоэлементов.
Пример использования:

div::after {
  @include pseudo;
  top: 10px;
  left: 10px;
  width: 150px;
}
*/
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

/*
Миксин для треугольников, сделанных через :before и :after
Пример:

div::after {
  @include triangle(black, top, 10px);
}
*/
@mixin triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);

  width: 0;
  height: 0;

  @if $round {
    border-radius: 3px;
  }

  @if $direction==down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  }

  @else if $direction==up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  }

  @else if $direction==right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  }

  @else if $direction==left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

/*
Миксин для медиа-запросов
Пример использования:
div {
  @include screen('phone') {
    // Правила для разрешений выше 'phone'
  }

  @include screen('phone', max) {
    // Правила для разрешений ниже 'phone'
  }
}
*/


@mixin screen($width, $type: max, $version: 1) {
  @if $version == 2 {
    @if map_has_key($nd-breakpoints, $width) {
      $width: map_get($nd-breakpoints, $width);

      @if $type==max {
        $width: $width - 1px;
      }

      @media only screen and (#{$type}-width: $width) {
        @content;
      }
    } @else {
      @if $type == max {
        $width: $width - 1px;
      }

      @media only screen and (#{$type}-width: $width) {
        @content;
      }
    }
  } @else {
    @if map_has_key($breakpoints, $width) {
      $width: map_get($breakpoints, $width);

      @if $type == max {
        $width: $width - 1px;
      }

      @media only screen and (#{$type}-width: $width) {
        @content;
      }
    }
  }
}

/*
Быстренько подрубаем аппаратное ускорение для анимирующихся элементов.
Пример использования:
div {
  @include performance;
}
*/
@mixin performance($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}

/*
Миксин для обрезания длинной строки троеточием.
Пример использования:
p {
  @include ellipsis(100%);
}
*/
@mixin ellipsis($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/*
Миксин для быстрого добавления clearfix.
Пример использования:
.parent {
  @include clearfix;
}
*/
@mixin clearfix {

  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/*
Миксин для того, чтоб скрыть элемент, но при этом он все равно рендерился
и был доступен в DOM.
Пример использования:
div {
  @include visual-hide;
}
*/
@mixin visual-hide() {
  margin: 0;
  padding: 0;
  width: 0;
  height: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
}

/*
Миксин для быстрого выравнивания блока по центру
Пример использования:
div {
  @include center-block;
}
*/
@mixin center-block {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/*
Миксин для быстрого выравнивания картинки по центру
Пример использования:
div {
  @include center-image;
}
*/
@mixin center-image {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
}

/*
Миксин для изображений.
Нужен, чтобы картинка заполняла другой блок подобно background-size: cover
Пример использования:
div {
  @include fill-img;
}
*/
@mixin fill-img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  object-fit: cover;
  font-family: 'object-fit: cover;';
  width: 0;
  min-width: 100%;
  min-height: 100%;
}

// Ensure CSS grid works with IE 11 spec.
// https://css-tricks.com/browser-compatibility-css-grid-layouts-simple-sass-mixins/
// sass-lint:disable no-vendor-prefixes, no-duplicate-properties
@mixin display-grid {
  display: -ms-grid;
  display: grid;
}

// $columns values should be delimited by a space
@mixin grid-template-columns($columns...) {
  -ms-grid-columns: $columns;
  grid-template-columns: $columns;
}

// $rows values should be delimited by a space
@mixin grid-template-rows($rows...) {
  -ms-grid-rows: $rows;
  grid-template-rows: $rows;
}

// Can be used in combination with above grid-template-X mixins.
// These result in the same output:
// @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
// @include grid-template-columns(10px 20px 20px 20px 20px 30px);
@function grid-repeat($repeat, $stuff: 1fr) {
  $list: ();

  @for $i from 1 through $repeat {
    $list: append($list, $stuff, space);
  }

  @return $list;
}

@mixin grid-column($col-start, $col-end) {
  -ms-grid-column: $col-start;
  -ms-grid-column-span: $col-end - $col-start;
  grid-column: #{$col-start} / #{$col-end};
}

@mixin grid-row($row-start, $row-end) {
  -ms-grid-row: $row-start;
  -ms-grid-row-span: $row-end - $row-start;
  grid-row: #{$row-start} / #{$row-end};
}

@mixin grid-align-self($value) {
  -ms-grid-row-align: $value;
  align-self: $value;
}

@mixin grid-justify-self($value) {
  -ms-grid-column-align: $value;
  justify-self: $value;
}

/*
Миксин для адаптивных свойств
@include rule(width, (xl: 100px, lg: 200px));
@include rule(width, (sm: 500px), min); (для mobile-first)
*/

@mixin rule($name, $pointsAndValues, $direction: max) {
  @each $breakpoint, $value in $pointsAndValues {
    @if ($breakpoint == xl) and ($direction == max) {
      #{$name}: #{$value};
    }

    @else {
      @include screen('#{$breakpoint}', $direction, 2) {
        #{$name}: pxtovw($value, map-get($nd-breaksizes, $breakpoint));
      }
    }
  }
}

@mixin native-scroll($track-color: $nd-color-scroll, $bar-color: transparent, $track-width: 3, $bar-width: 6, $radius: 4) {
  scrollbar-color: $track-color $bar-color;
  scrollbar-width: thin;
  -ms-overflow-style: none;

  &::-webkit-scrollbar-track {
    background-color: $bar-color;

    @include rule(width, (xl: $track-width * 1px, xlg: $track-width, lg: $track-width, md: $track-width, sm: $track-width));
  }

  &::-webkit-scrollbar-track-piece {
    background-color: $bar-color;
  }

  &::-webkit-scrollbar {
    background-color: $bar-color;

    @include rule(width, (xl: $bar-width * 1px, xlg: $bar-width, lg: $bar-width, md: $bar-width, sm: $bar-width));
  }

  &::-webkit-scrollbar-thumb {
    border-width: ($bar-width * 1px) ($track-width * 1px) ($bar-width * 1px) 0;
    border-style: solid;
    border-color: $bar-color;
    background-color: $track-color;
    background-clip: padding-box;

    @include rule(width, (xl: $track-width * 1px, xlg: $track-width, lg: $track-width, md: $track-width, sm: $track-width));
    @include rule(border-radius, (xl: $radius * 1px, xlg: $radius, lg: $track-width, md: $radius, sm: $radius));

    @include screen('xlg', max, 2) {
      border-width: pxtovw($bar-width, 1660) pxtovw($track-width, 1660) pxtovw($bar-width, 1660) 0;
    }

    @include screen('lg', max, 2) {
      border-width: pxtovw($bar-width, 1366) pxtovw($track-width, 1366) pxtovw($bar-width, 1366) 0;
    }

    @include screen('md', max, 2) {
      border-width: pxtovw($bar-width, 960) pxtovw($track-width, 960) pxtovw($bar-width, 960) 0;
    }

    @include screen('sm', max, 2) {
      border-width: pxtovw($bar-width, 375) pxtovw($track-width, 375) pxtovw($bar-width, 375) 0;
    }
  }
}
